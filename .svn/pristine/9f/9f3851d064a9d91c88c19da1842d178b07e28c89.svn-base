<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-autowire="byName">
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:template.properties</value>
				<value>classpath:dynamicPage.properties</value>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mail.properties</value>
				<value>classpath:im.properties</value>				
				<value>classpath:cms.properties</value>
			</list>
		</property>
		<property name="placeholderPrefix" value="@{" />
		<property name="placeholderSuffix" value="}" />
	</bean>

	<bean id="cyberwayDataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="@{db.driver}" />
		<property name="url" value="@{db.url}" />
		<property name="username" value="@{db.username}" />
		<property name="password" value="@{db.password}" />
	</bean>

	<bean id="otherDataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="@{db.other.driver}" />
		<property name="url" value="@{db.other.url}" />
		<property name="username" value="@{db.other.username}" />
		<property name="password" value="@{db.other.password}" />
	</bean>	
	
	<!-- 用p6spy 在console显示变量绑定后的真实sql 与ResultSet,方便开发 -->
	<!--bean id="cyberwayDataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg>
		<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="@{db.driver}"/>
		<property name="url" value="@{db.url}"/>
		<property name="username" value="@{db.username}"/>
		<property name="password" value="@{db.password}"/>
		</bean>
		</constructor-arg>
		</bean-->


	<!-- 通过JNDI 使用应用服务器 的Connection Pool-->
	<!--bean id="cyberwayDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/cyberwaydb"/>
	</bean-->

	<!--bean id="cyberwayDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/kmsds"/>
	</bean>
	<bean id="otherDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/gzweb"/>
	</bean-->
	<!--bean id="cyberwayDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/kmsds"/>
	</bean-->	
<!-- JNDI configuration -->
    <!--bean id="jndi" class="org.apache.xbean.spring.jndi.SpringInitialContextFactory" factory-method="makeInitialContext">
     <description>A simple JNDI initial context.</description>
     <property name="entries">
     <map>
     <entry key="java:comp/UserTransaction" value-ref="transactionManager" />
     </map>
     </property>
     </bean>
     <bean id="userTransaction" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/UserTransaction"/>
  </bean>
     <bean id="userTransaction" class="org.jencks.factory.TransactionManagerFactoryBean"/-->
     
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="cyberwayDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">@{db.dialect}</prop>
				<prop key="hibernate.show_sql">@{db.show_sql}</prop>
				<prop key="hibernate.format_sql">@{db.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">
					@{db.use_sql_comments}
				</prop>
				<prop key="hibernate.cache.use_query_cache">
					@{db.use_query_cache}
				</prop>
				<prop key="hibernate.default_batch_fetch_size">16</prop>
				<prop key="hibernate.jdbc.fetch_size">30</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<prop key="hibernate.cache.provider_class">
					@{db.cache_provider_class}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--prop key="hibernate.transaction.factory_class">
					org.hibernate.transaction.JTATransactionFactory
				</prop>				
				<prop key="hibernate.transaction.manager_lookup_class">
					org.hibernate.transaction.JOTMTransactionManagerLookup
				</prop>
				<prop key="jta.UserTransaction">
					java:comp/env/UserTransaction
				</prop-->
			</props>
		</property>
		<property name="eventListeners">
			<map>
                <entry key="post-insert" value-ref="hibernateEventListener"/>
                <entry key="post-update" value-ref="hibernateEventListener"/>
                <entry key="post-delete" value-ref="hibernateEventListener"/>
			</map>
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/cyberway/</value>				
			</list>
		</property>
		<!--property name="mappingJarLocations">
			<list>
			  <value>WEB-INF/lib/cyberway-1.0.jar</value>
			</list> 
		</property-->
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.cyberway..*Service.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.cyberway..*Dao.*(..))"
			advice-ref="txAdvice" />
			<aop:advisor pointcut="execution(* com.cyberway..*EventListener.*(..)) and !execution(* com.cyberway.common.service.HibernateEventListener.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" />
			<tx:method name="save" />
			<tx:method name="modify*" />
			<tx:method name="update*" />
			<tx:method name="remove*" />
			<tx:method name="delete*" />
			<tx:method name="paste*" />
			<tx:method name="copy*" />
			<tx:method name="insert*" />
			<tx:method name="import*" />
			<tx:method name="set*" />
			<tx:method name="*Comple*" />
			<tx:method name="entity*" />
			<tx:method name="*"/>
			<!-- <tx:method name="*" read-only="true" />-->
		</tx:attributes>
	</tx:advice>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="cyberwayDataSource" />
	</bean>
	
	<!--webservice基类-->
	<bean id="baseWebService"
		class="org.codehaus.xfire.spring.remoting.XFireExporter"
		abstract="true">
		<property name="serviceFactory" ref="xfire.serviceFactory" />
		<property name="xfire" ref="xfire" />
	</bean>
	
	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation">
			<value>
				classpath:ehcache.xml
			</value>
		</property>
	</bean>
	
	<!-- freemarker config -->
	<bean id="freeMarkerEngine" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/template/"/>
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
			</props>
		</property>
	</bean>
	<!-- 根据模板生成html文件或内容串 -->
    <bean id="templateGenerator" class="com.cyberway.core.mail.TemplateGenerator"
          autowire="byName">
        <property name="htmlFileDir" value="htmlGen"/>
    </bean>
    
     <!-- 报表 -->
    <bean id="reportsService" class="com.cyberway.core.reports.service.ReportsService" />
    
	<!-- 支持 @Transactional 标记 -->
	<!--tx:annotation-driven/-->
    <bean name="openSessionInViewInterceptor" class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
       <property name="sessionFactory"><ref bean="sessionFactory"/></property> 
    </bean>

	<!-- 支持 @AspectJ 标记-->
	<!--aop:aspectj-autoproxy /-->
	<!--import resource="classpath:com/cyberway/core/mail/mail-context.xml"/>
	<import resource="classpath*:com/cyberway/core/acegi/acegi-context.xml"/-->		
	<!--import resource="classpath:cn/org/coral/core/im/activemq-context.xml"/>
	<import resource="classpath:cn/org/coral/core/im/im-context.xml"/>
	<import resource="classpath:cn/org/coral/core/im/xfire-context.xml"/>
	<import resource="classpath:cn/org/coral/core/im/quartz-context.xml"/-->

</beans>
